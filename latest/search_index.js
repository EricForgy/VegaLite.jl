var documenterSearchIndex = {"docs": [

{
    "location": "index.html#",
    "page": "Introduction",
    "title": "Introduction",
    "category": "page",
    "text": "VegaLite.jl enables the generation of Vega-Lite plots from Julia.Vega-Lite (http://vega.github.io/vega-lite/) is a visualization grammar describing mappings from data to graphical properties (marks, axes, scales, ..). For rendering it uses pre-defined design rules that keep the visualization specification succinct while still leaving user control.Vega-Lite supports :data transformation, sorting, filtering and grouping,\naggregation, binning, and simple statistical analysis (mean, std, var, count, ..).\nplots can be faceted, layered and stacked vertically or horizontally.To install the package run Pkg.add(\"VegaLite\")."
},

{
    "location": "index.html#Principles-1",
    "page": "Introduction",
    "title": "Principles",
    "category": "section",
    "text": "The package is essentially a thin layer translating Julia statements to the Vega-Lite visualization specification format.Vega-Lite uses the JSON format for its specification. Typical Vega-Lite specs look like :{\n  \"encoding\": {\n    \"x\": {\n      \"bin\": {\n        \"maxbins\": 10\n      },\n      \"field\": \"IMDB_Rating\",\n      \"type\": \"quantitative\"\n    },\n    \"size\": {\n      \"aggregate\": \"count\",\n      \"type\": \"quantitative\"\n    },\n    \"y\": {\n      \"bin\": {\n        \"maxbins\": 10\n      },\n      \"field\": \"Rotten_Tomatoes_Rating\",\n      \"type\": \"quantitative\"\n    }\n  },\n  \"data\": {\n    \"url\": \"https://raw.githubusercontent.com/vega/new-editor/master/data/movies.json\"\n  },\n  \"mark\": {\n    \"type\": \"circle\"\n  }\n}This visualization specification can be generated from within Julia by:data(url=\"https://raw.githubusercontent.com/vega/new-editor/master/data/movies.json\") |>\n  markcircle() |>\n  encoding(xquantitative(vlbin(maxbins=10), field=:IMDB_Rating),\n           yquantitative(vlbin(maxbins=10), field=:Rotten_Tomatoes_Rating),\n           sizequantitative(aggregate=:count))Finally the plot generated by the vega-lite library will  look like :(Image: plot1)"
},

{
    "location": "quick.html#",
    "page": "Quick Tour",
    "title": "Quick Tour",
    "category": "page",
    "text": ""
},

{
    "location": "quick.html#Quick-tour-1",
    "page": "Quick Tour",
    "title": "Quick tour",
    "category": "section",
    "text": ""
},

{
    "location": "quick.html#Simple-scatter-plot-1",
    "page": "Quick Tour",
    "title": "Simple scatter plot",
    "category": "section",
    "text": "Use functions linked by the |> operator to build your visuialization incrementally. VegaLite.jl can use DataFrames or DataTables as sources for data. For a scatter plot, specify that the mark should a point by markpoint(), then how the data in the DataFrame mpg (fields :Cty, :Hwy and :Manufacturer) should be connected to the encoding channels (x, y and color respectively). Finally, global configuration options are provided in a config function (type ? config`to see all the options).using RDatasets\n\nmpg = dataset(\"ggplot2\", \"mpg\") # load the \'mpg\' dataframe\n\nmpg |> # start with the data source (here a DataFrame)\n  markpoint() |>\n  encoding(xquantitative(field=:Cty, axis=nothing),\n           yquantitative(field=:Hwy, vlscale(zero=false)),\n           colornominal(field=:Manufacturer)) |>    # bind color to :Manufacturer, nominal scale\n  config(vlcell(width=350, height=400))(Image: plot1)An alternative, more julian syntax, without the piping operator is also valid. The preceding statement can just as well be written :plot(data(mpg),\n     markpoint(),\n     encoding(xquantitative(field=:Cty, axis=nothing),\n              yquantitative(field=:Hwy, vlscale(zero=false)),\n              colornominal(field=:Manufacturer)),\n     config(vlcell(width=350, height=400)))"
},

{
    "location": "quick.html#Stacking-multiple-plots-with-hconcat()-or-vconcat()-1",
    "page": "Quick Tour",
    "title": "Stacking multiple plots with hconcat() or vconcat()",
    "category": "section",
    "text": "Several independant plots can be concatenated vertically or horizontally :using RDatasets\n\nmpg = dataset(\"ggplot2\", \"mpg\") # load the \'mpg\' dataframe\n\nr1 = markline() |>\n     encoding(xquantitative(field=:Cty, axis=nothing),\n              yquantitative(field=:Hwy, vlscale(zero=false)),\n              colornominal(field=:Manufacturer)) ;\n\nr2 = markrect() |>\n      encoding(xquantitative(field=:Displ, vlbin(maxbins=5)),\n               yquantitative(field=:Hwy, vlbin(maxbins=5)),\n               colornominal(field=:Manufacturer)) ;\n\nmpg |>\n  vconcat(r1) |>\n  vconcat(r2) |>\n  config(vlcell(width=400))(Image: plot2)"
},

{
    "location": "quick.html#Using-layer()-to-surimpose-several-plots-1",
    "page": "Quick Tour",
    "title": "Using layer() to surimpose several plots",
    "category": "section",
    "text": "When several marks need to shown on the same visualization, use the layer() function :using DataFrames\n\ndf  = DataFrame(x=[0:5;], y=rand(6))\n\nencx = xquantitative(field=:x)\nency = yquantitative(field=:y)\n\ndf |>\n  plot(width=500) |>\n  layer(markline(interpolate=\"linear\"),\n        encoding(encx, ency, vlcolor(value=\"green\"))) |>\n  layer(markline(interpolate=\"basis\"),\n        encoding(encx, ency, vlcolor(value=\"red\"))) |>\n  layer(markpoint(), encoding(encx, ency, vlcolor(value=\"black\")))(Image: plot4)"
},

{
    "location": "quick.html#Using-repeat()-to-facet-a-plot-by-data-fields-1",
    "page": "Quick Tour",
    "title": "Using repeat() to facet a plot by data fields",
    "category": "section",
    "text": "To create a facet plot with encoding channels cycled through a list of data fields use the repeat() function :using Distributions, DataTables\n\nxs = rand(Normal(), 100, 3)\ndt = DataTable(a = xs[:,1] + xs[:,2] .^ 2,\n               b = xs[:,3] .* xs[:,2],\n               c = xs[:,3] .+ xs[:,2])\n\ndt |>\n  repeat(column = [:a, :b, :c], row = [:a, :b, :c]) |>\n  config(vlcell(width=100, height=100)) |>\n  spec(markpoint(),\n       encoding(xquantitative(vlfield(repeat=:column)),\n                yquantitative(vlfield(repeat=:row))))(Image: plot3)"
},

{
    "location": "vlspec.html#",
    "page": "Vega-lite specifications",
    "title": "Vega-lite specifications",
    "category": "page",
    "text": ""
},

{
    "location": "vlspec.html#Vega-lite-specifications-1",
    "page": "Vega-lite specifications",
    "title": "Vega-lite specifications",
    "category": "section",
    "text": "A vega-lite specification is represented as a VLSpec object in julia. There are multiple ways to create a VLSpec object. The previous section demonstrated the use of the julia API to create these specification objects. This section describes three additional ways to create and interact with these specification objects: the vl string macro, functions that load and save specifications from and to disc, and the DataVoyager.jl package."
},

{
    "location": "vlspec.html#The-vl-string-macro-1",
    "page": "Vega-lite specifications",
    "title": "The vl string macro",
    "category": "section",
    "text": "One can embed a JSON vega-lite specification directly in julia code by using the vl string macro:using VegaLite\n\nspec = vl\"\"\"\n{\n  \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.json\",\n  \"description\": \"A simple bar chart with embedded data.\",\n  \"data\": {\n    \"values\": [\n      {\"a\": \"A\",\"b\": 28}, {\"a\": \"B\",\"b\": 55}, {\"a\": \"C\",\"b\": 43},\n      {\"a\": \"D\",\"b\": 91}, {\"a\": \"E\",\"b\": 81}, {\"a\": \"F\",\"b\": 53},\n      {\"a\": \"G\",\"b\": 19}, {\"a\": \"H\",\"b\": 87}, {\"a\": \"I\",\"b\": 52}\n    ]\n  },\n  \"mark\": \"bar\",\n  \"encoding\": {\n    \"x\": {\"field\": \"a\", \"type\": \"ordinal\"},\n    \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}\n  }\n}\n\"\"\"The resulting VLSpec object is indistinguishable from one that is created via the julia API.The main benefit of this approach is that one can directly leverage JSON vega-lite examples and code."
},

{
    "location": "vlspec.html#Loading-and-saving-vega-lite-specifications-1",
    "page": "Vega-lite specifications",
    "title": "Loading and saving vega-lite specifications",
    "category": "section",
    "text": "The loadspec and savespec function can be used to load and save vega-lite specifications from disc. The following example loads a vega-lite specification from a file named myfigure.vegalite:using VegaLite\n\nspec = loadspec(\"myfigure.vegalite\")To save a VLSpec to a file on disc, use the savespec function:using VegaLite\n\nspec = ... # Aquire a spec from somewhere\n\nsavespec(\"myfigure.vegalite\", spec)"
},

{
    "location": "vlspec.html#[DataVoyager.jl](https://github.com/davidanthoff/DataVoyager.jl)-1",
    "page": "Vega-lite specifications",
    "title": "DataVoyager.jl",
    "category": "section",
    "text": "The DataVoyager.jl package provides a graphical UI for data exploration that is based on vega-lite. One can use that tool to create a figure in the UI, and then export the corresponding vega-lite specification for use with this package here."
},

{
    "location": "global.html#",
    "page": "Global settings",
    "title": "Global settings",
    "category": "page",
    "text": ""
},

{
    "location": "global.html#VegaLite.renderer",
    "page": "Global settings",
    "title": "VegaLite.renderer",
    "category": "function",
    "text": "renderer()\n\nshow current rendering mode (svg or canvas)\n\nrenderer(::Symbol)\n\nset rendering mode (svg or canvas)\n\n\n\n"
},

{
    "location": "global.html#VegaLite.actionlinks",
    "page": "Global settings",
    "title": "VegaLite.actionlinks",
    "category": "function",
    "text": "actionlinks()::Bool\n\nshow if plots will have (true) or not (false) the action links displayed\n\nactionlinks(::Bool)\n\nindicate if actions links should be dislpayed under the plot\n\n\n\n"
},

{
    "location": "global.html#VegaLite.junoplotpane",
    "page": "Global settings",
    "title": "VegaLite.junoplotpane",
    "category": "function",
    "text": "junoplotpane()::Bool\n\nwhen using Juno, show if plots will be rendered in plotpane or not\n\njunoplotpane(::Bool)\n\nset if plots should be rendered in Juno\'s plotpane or not\n\n\n\n"
},

{
    "location": "global.html#Global-settings-1",
    "page": "Global settings",
    "title": "Global settings",
    "category": "section",
    "text": "rendereractionlinksjunoplotpane"
},

{
    "location": "output.html#",
    "page": "Outputs",
    "title": "Outputs",
    "category": "page",
    "text": ""
},

{
    "location": "output.html#Output-1",
    "page": "Outputs",
    "title": "Output",
    "category": "section",
    "text": ""
},

{
    "location": "output.html#On-evaluation-1",
    "page": "Outputs",
    "title": "On evaluation",
    "category": "section",
    "text": ""
},

{
    "location": "output.html#VegaLite.pdf",
    "page": "Outputs",
    "title": "VegaLite.pdf",
    "category": "function",
    "text": "pdf(filename::AbstractString, v::VLSpec{:plot})\n\nSave the plot v as a pdf file with name filename.\n\n\n\n"
},

{
    "location": "output.html#VegaLite.png",
    "page": "Outputs",
    "title": "VegaLite.png",
    "category": "function",
    "text": "png(filename::AbstractString, v::VLSpec{:plot})\n\nSave the plot v as a png file with name filename.\n\n\n\n"
},

{
    "location": "output.html#VegaLite.svg",
    "page": "Outputs",
    "title": "VegaLite.svg",
    "category": "function",
    "text": "svg(filename::AbstractString, v::VLSpec{:plot})\n\nSave the plot v as a svg file with name filename.\n\n\n\n"
},

{
    "location": "output.html#VegaLite.savefig",
    "page": "Outputs",
    "title": "VegaLite.savefig",
    "category": "function",
    "text": "savefig(filename::AbstractString, v::VLSpec{:plot})\n\nSave the plot v as a file with name filename. The file format will be picked based on the extension of the filename.\n\n\n\n"
},

{
    "location": "output.html#Saving-to-a-file-1",
    "page": "Outputs",
    "title": "Saving to a file",
    "category": "section",
    "text": "pdf\npng\nsvgOr you can use a single saving functions that guesses the image format from the extension of the provided filenamesavefig"
},

{
    "location": "functions.html#",
    "page": "API reference",
    "title": "API reference",
    "category": "page",
    "text": ""
},

{
    "location": "functions.html#Functions-1",
    "page": "API reference",
    "title": "Functions",
    "category": "section",
    "text": ""
},

{
    "location": "functions.html#VegaLite.plot",
    "page": "API reference",
    "title": "VegaLite.plot",
    "category": "function",
    "text": "plot\n\nOne of :\n\ncase #1\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\npadding :  see help for vlpadding()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nconfig :  see help for vlconfig()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ncase #2\ndata :  see help for vldata()\nrepeat :  see help for vlrepeat()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nspec :  see help for vlspec()\npadding :  see help for vlpadding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nconfig :  see help for vlconfig()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ncase #3\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\npadding :  see help for vlpadding()\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nconfig :  see help for vlconfig()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ncase #4\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nspec : A specification of the view that gets faceted. see help for vlspec()\npadding :  see help for vlpadding()\nfacet :  see help for vlfacet()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nconfig :  see help for vlconfig()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ncase #5\nvconcat : A list of views that should be concatenated and put into a column. see help for vlvconcat()\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\npadding :  see help for vlpadding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nconfig :  see help for vlconfig()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ncase #6\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\npadding :  see help for vlpadding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nconfig :  see help for vlconfig()\n$schema :   (String/Symbol) URL to JSON schema for a Vega-Lite specification. Unless you have a reason to change this, use https://vega.github.io/schema/vega-lite/v2.json. Setting the $schema property allows automatic validation and autocomplete in editors that support JSON schema.\nhconcat : A list of views that should be concatenated and put into a row. see help for vlhconcat()\ntitle : Title for the plot. see help for vltitle()\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\ndatasets :  see help for vldatasets()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.data",
    "page": "API reference",
    "title": "VegaLite.data",
    "category": "function",
    "text": "vldata in vlfrom(), vllayer(), plot() and vlspec()\n\nOne of :\n\ncase #1\nformat :  see help for vlformat()\nvalues :  see help for vlvalues()\ncase #2\nformat :  see help for vlformat()\nurl :   (String/Symbol) An URL from which to load the data set. Use the format.type property to ensure the loaded data is correctly parsed.\ncase #3\nname :   (String/Symbol) Provide a placeholder name and bind data at runtime.\nformat :  see help for vlformat()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.transform",
    "page": "API reference",
    "title": "VegaLite.transform",
    "category": "function",
    "text": "vltransform in vllayer(), plot() and vlspec()\n\nOne of :\n\ncase #1\ngroupby :   (Array of String/Symbol) The data fields to group by. If not specified, a single group containing all data objects will be used.\naggregate : Array of objects that define fields to aggregate. see help for vlaggregate()\ncase #2\ndefault :   (String/Symbol) The default value to use if lookup fails.  Default value: null\nas :   (String/Symbol or ???) The field or fields for storing the computed formula value. If from.fields is specified, the transform will use the same names for as. If from.fields is not specified, as has to be a string and we put the whole object into the data under the specified name.\nfrom :  see help for vlfrom()\nlookup :   (String/Symbol) Key in primary data source.\ncase #3\nfilter :  see help for vlfilter()\ncase #4\nbin : An object indicating bin properties, or simply true for using default bin parameters. see help for vlbin()\nfield : The data field to bin. see help for vlfield()\nas :   (String/Symbol) The output fields at which to write the start and end bin values.\ncase #5\ncalculate :   (String/Symbol) A expression string. Use the variable datum to refer to the current data object.\nas :   (String/Symbol) The field for storing the computed formula value.\ncase #6\ntimeUnit :   (??? or ???)\nfield : The data field to apply time unit. see help for vlfield()\nas :   (String/Symbol) The output field to write the timeUnit value.\ncase #7\nwindow : The definition of the fields in the window, and what calculations to use. see help for vlwindow()\nframe :   (Array of ???) A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is [null, 0], indicating that the sliding window includes the current object and all preceding objects. The value [-5, 5] indicates that the window should include five objects preceding and five objects following the current object. Finally, [null, null] indicates that the window frame should always include all data objects. The only operators affected are the aggregation operations and the first_value, last_value, and nth_value window operations. The other window operations are not affected by this.  Default value::  [null, 0] (includes the current object and all preceding objects)\nignorePeers :   (Bool) Indicates if the sliding window frame should ignore peer values. (Peer values are those considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.  Default value: false\nsort : A comparator definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered “peer” values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to true). see help for vlsort()\ngroupby :   (Array of String/Symbol) The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be a single group.\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlmark",
    "page": "API reference",
    "title": "VegaLite.vlmark",
    "category": "function",
    "text": "vlmark in vlinterval()\n\nstrokeDash :   (Array of Number) An array of alternating stroke and space lengths, for creating dashed or dotted lines.\nstroke : The stroke color of the interval mark.  Default value: #ffffff see help for vlstroke()\nstrokeWidth :   (Number) The stroke width of the interval mark.\nfillOpacity :   (Number) The fill opacity of the interval mark (a value between 0 and 1).  Default value: 0.125\nfill : The fill color of the interval mark.  Default value: #333333 see help for vlfill()\nstrokeOpacity :   (Number) The stroke opacity of the interval mark (a value between 0 and 1).\nstrokeDashOffset :   (Number) The offset (in pixels) with which to begin drawing the stroke dash array.\n\nvlmark in vllayer(), plot() and vlspec()\n\ntension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nfontWeight :   (one of normal,bold or Number)\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nbinSpacing :   (Number) Offset between bars for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).  Default value: 1\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\npoint : A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.  - If this property is \"transparent\", transparent points will be used (for enhancing tooltips and selections).  - If this property is an empty object ({}) or true, filled points with default properties will be used.  - If this property is false, no points would be automatically added to line or area marks.  Default value: false. see help for vlpoint()\nline : A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.  - If this value is an empty object ({}) or true, lines with default properties will be used.  - If this value is false, no lines would be automatically added to area marks.  Default value: false. see help for vlline()\nclip :   (Bool) Whether a mark be clipped to the enclosing group’s width and height.\nstyle : A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the style configuration. If style is an array, later styles will override earlier styles. Any mark properties explicitly defined within the encoding will override a style default.  Default value: The mark\'s name.  For example, a bar mark will have style \"bar\" by default. Note: Any specified style will augment the default style. For example, a bar mark with \"style\": \"foo\" will receive from config.style.bar and config.style.foo (the specified style \"foo\" has higher precedence). see help for vlstyle()\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\ntyp :   (one of tick,bar,square,point,line,rect,area,circle,rule,trail,text,geoshape) All types of primitive marks.\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.encoding",
    "page": "API reference",
    "title": "VegaLite.encoding",
    "category": "function",
    "text": "vlencoding in vllayer() and vlspec()\n\nstroke : Stroke color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using stroke channel, color channel will be ignored. To customize both stroke and fill, please use stroke and fill channels (not stroke and color). see help for vlstroke()\nx : X coordinates of the marks, or width of horizontal \"bar\" and \"area\". see help for vlx()\nopacity : Opacity of the marks – either can be a value or a range.  Default value: If undefined, the default opacity depends on mark config\'s opacity property. see help for vlopacity()\nshape : For point marks the supported values are \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or else a custom SVG path string. For geoshape marks it should be a field definition of the geojson data  Default value: If undefined, the default shape depends on mark config\'s shape property. see help for vlshape()\nhref : A URL to load upon mouse click. see help for vlhref()\nlatitude2 : Definition object for a data field, its type and transformation of an encoding channel. see help for vllatitude2()\nfill : Fill color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using fill channel, color channel will be ignored. To customize both fill and stroke, please use fill and stroke channels (not fill and color). see help for vlfill()\ny : Y coordinates of the marks, or height of vertical \"bar\" and \"area\". see help for vly()\nkey :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ntooltip : The tooltip text to show upon mouse hover. see help for vltooltip()\nx2 : X2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vlx2()\nsize : Size of the mark. - For \"point\", \"square\" and \"circle\", – the symbol size, or pixel area of the mark. - For \"bar\" and \"tick\" – the bar and tick\'s size. - For \"text\" – the text\'s font size. - Size is unsupported for \"line\", \"area\", and \"rect\". (Use \"trail\" instead of line with varying size) see help for vlsize()\nlatitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ndetail : Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel. see help for vldetail()\nlongitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\norder : Order of the marks. - For stacked marks, this order channel encodes stack order. - For line and trail marks, this order channel encodes order of data points in the lines. This can be useful for creating a connected scatterplot.  Setting order to {\"value\": null} makes the line marks use the original order in the data sources. - Otherwise, this order channel encodes layer order of the marks.  Note: In aggregate plots, order field should be aggregated to avoid creating additional aggregation grouping. see help for vlorder()\ncolor : Color of the marks – either fill or stroke color based on  the filled property of mark definition. By default, color represents fill color for \"area\", \"bar\", \"tick\", \"text\", \"trail\", \"circle\", and \"square\" / stroke color for \"line\" and \"point\".  Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the fill and stroke channels.  If either fill or stroke channel is specified, color channel will be ignored. 2) See the scale documentation for more information about customizing color scheme. see help for vlcolor()\ny2 : Y2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vly2()\ntext : Text of the text mark. see help for vltext()\nlongitude2 :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\nvlencoding in plot()\n\nOne of :\n\ncase #1\nstroke : Stroke color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using stroke channel, color channel will be ignored. To customize both stroke and fill, please use stroke and fill channels (not stroke and color). see help for vlstroke()\nx : X coordinates of the marks, or width of horizontal \"bar\" and \"area\". see help for vlx()\nrow :  see help for vlrow()\nopacity : Opacity of the marks – either can be a value or a range.  Default value: If undefined, the default opacity depends on mark config\'s opacity property. see help for vlopacity()\ncolumn :  see help for vlcolumn()\nshape : For point marks the supported values are \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or else a custom SVG path string. For geoshape marks it should be a field definition of the geojson data  Default value: If undefined, the default shape depends on mark config\'s shape property. see help for vlshape()\nhref : A URL to load upon mouse click. see help for vlhref()\nlatitude2 : Definition object for a data field, its type and transformation of an encoding channel. see help for vllatitude2()\nfill : Fill color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using fill channel, color channel will be ignored. To customize both fill and stroke, please use fill and stroke channels (not fill and color). see help for vlfill()\ny : Y coordinates of the marks, or height of vertical \"bar\" and \"area\". see help for vly()\nkey :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ntooltip : The tooltip text to show upon mouse hover. see help for vltooltip()\nx2 : X2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vlx2()\nsize : Size of the mark. - For \"point\", \"square\" and \"circle\", – the symbol size, or pixel area of the mark. - For \"bar\" and \"tick\" – the bar and tick\'s size. - For \"text\" – the text\'s font size. - Size is unsupported for \"line\", \"area\", and \"rect\". (Use \"trail\" instead of line with varying size) see help for vlsize()\nlatitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ndetail : Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel. see help for vldetail()\nlongitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\norder : Order of the marks. - For stacked marks, this order channel encodes stack order. - For line and trail marks, this order channel encodes order of data points in the lines. This can be useful for creating a connected scatterplot.  Setting order to {\"value\": null} makes the line marks use the original order in the data sources. - Otherwise, this order channel encodes layer order of the marks.  Note: In aggregate plots, order field should be aggregated to avoid creating additional aggregation grouping. see help for vlorder()\ncolor : Color of the marks – either fill or stroke color based on  the filled property of mark definition. By default, color represents fill color for \"area\", \"bar\", \"tick\", \"text\", \"trail\", \"circle\", and \"square\" / stroke color for \"line\" and \"point\".  Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the fill and stroke channels.  If either fill or stroke channel is specified, color channel will be ignored. 2) See the scale documentation for more information about customizing color scheme. see help for vlcolor()\ny2 : Y2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vly2()\ntext : Text of the text mark. see help for vltext()\nlongitude2 :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #2\nstroke : Stroke color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using stroke channel, color channel will be ignored. To customize both stroke and fill, please use stroke and fill channels (not stroke and color). see help for vlstroke()\nx : X coordinates of the marks, or width of horizontal \"bar\" and \"area\". see help for vlx()\nopacity : Opacity of the marks – either can be a value or a range.  Default value: If undefined, the default opacity depends on mark config\'s opacity property. see help for vlopacity()\nshape : For point marks the supported values are \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or else a custom SVG path string. For geoshape marks it should be a field definition of the geojson data  Default value: If undefined, the default shape depends on mark config\'s shape property. see help for vlshape()\nhref : A URL to load upon mouse click. see help for vlhref()\nlatitude2 : Definition object for a data field, its type and transformation of an encoding channel. see help for vllatitude2()\nfill : Fill color of the marks. Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ When using fill channel, color channel will be ignored. To customize both fill and stroke, please use fill and stroke channels (not fill and color). see help for vlfill()\ny : Y coordinates of the marks, or height of vertical \"bar\" and \"area\". see help for vly()\nkey :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ntooltip : The tooltip text to show upon mouse hover. see help for vltooltip()\nx2 : X2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vlx2()\nsize : Size of the mark. - For \"point\", \"square\" and \"circle\", – the symbol size, or pixel area of the mark. - For \"bar\" and \"tick\" – the bar and tick\'s size. - For \"text\" – the text\'s font size. - Size is unsupported for \"line\", \"area\", and \"rect\". (Use \"trail\" instead of line with varying size) see help for vlsize()\nlatitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ndetail : Additional levels of detail for grouping data in aggregate views and in line, trail, and area marks without mapping data to a specific visual channel. see help for vldetail()\nlongitude :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\norder : Order of the marks. - For stacked marks, this order channel encodes stack order. - For line and trail marks, this order channel encodes order of data points in the lines. This can be useful for creating a connected scatterplot.  Setting order to {\"value\": null} makes the line marks use the original order in the data sources. - Otherwise, this order channel encodes layer order of the marks.  Note: In aggregate plots, order field should be aggregated to avoid creating additional aggregation grouping. see help for vlorder()\ncolor : Color of the marks – either fill or stroke color based on  the filled property of mark definition. By default, color represents fill color for \"area\", \"bar\", \"tick\", \"text\", \"trail\", \"circle\", and \"square\" / stroke color for \"line\" and \"point\".  Default value: If undefined, the default color depends on mark config\'s color property.  _Note:_ 1) For fine-grained control over both fill and stroke colors of the marks, please use the fill and stroke channels.  If either fill or stroke channel is specified, color channel will be ignored. 2) See the scale documentation for more information about customizing color scheme. see help for vlcolor()\ny2 : Y2 coordinates for ranged \"area\", \"bar\", \"rect\", and  \"rule\". see help for vly2()\ntext : Text of the text mark. see help for vltext()\nlongitude2 :   Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.config",
    "page": "API reference",
    "title": "VegaLite.config",
    "category": "function",
    "text": "vlconfig in plot()\n\ncountTitle :   (String/Symbol) Default axis and legend title for count fields.  Default value: \'Number of Records\'.\ndatasets :  see help for vldatasets()\ngeoshape :  see help for vlgeoshape()\nbackground :   (String/Symbol) CSS color property to use as the background of visualization.  Default value: none (transparent)\ntick :  see help for vltick()\nview :  see help for vlview()\nmark :  see help for vlmark()\nscale :  see help for vlscale()\nnumberFormat :   (String/Symbol) D3 Number format for axis labels and text tables. For example \"s\" for SI units. Use D3\'s number format pattern.\naxisBand :  see help for vlaxisBand()\nbar :  see help for vlbar()\npadding :  see help for vlpadding()\nrange :  see help for vlrange()\naxisX :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\nstack :   (one of zero,normalize,center)\nsquare :   - tension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\ntimeFormat :   (String/Symbol) Default datetime format for axis and legend labels. The format can be set directly on each axis and legend. Use D3\'s time format pattern.  Default value: \'%b %d, %Y\'.\naxisTop :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\npoint :  see help for vlpoint()\naxisBottom :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\nline :  see help for vlline()\nselection :  see help for vlselection()\nrect :   - tension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\naxis :  see help for vlaxis()\narea :  see help for vlarea()\ncircle :   - tension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\nstyle :  see help for vlstyle()\nfieldTitle :   (one of functional,verbal,plain) Defines how Vega-Lite generates title for fields.  There are three possible styles: - \"verbal\" (Default) - displays function in a verbal style (e.g., \"Sum of field\", \"Year-month of date\", \"field (binned)\"). - \"function\" - displays function using parentheses and capitalized texts (e.g., \"SUM(field)\", \"YEARMONTH(date)\", \"BIN(field)\"). - \"plain\" - displays only the field name without functions (e.g., \"field\", \"date\", \"field\").\nrule :   - tension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\naxisY :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\nprojection : Any property of Projection can be in config see help for vlprojection()\naxisRight :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\ninvalidValues :   (String/Symbol or Void) Defines how Vega-Lite should handle invalid values (null and NaN). - If set to \"filter\" (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks). - If null, all data items are included. In this case, invalid values will be interpreted as zeroes.\naxisLeft :   - domainColor :   (String/Symbol) Color of axis domain line.  Default value:  (none, using Vega default).\nlabelBound :   (Bool or Number) Indicates if labels should be hidden if they exceed the axis range. If false (the default) no bounds overlap analysis is performed. If true, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.  Default value: false.\ntitleX :   (Number) X-coordinate of the axis title relative to the axis group.\nlabelPadding :   (Number) The padding, in pixels, between axis and text labels.\ntickRound :   (Bool) Boolean flag indicating if pixel position values should be rounded to the nearest integer.\ntickWidth :   (Number) The width, in pixels, of ticks.\ntitlePadding :   (Number) The padding, in pixels, between title and axis.\ntickSize :   (Number) The size in pixels of axis ticks.\nlabelAngle :   (Number) The rotation angle of the axis labels.  Default value: -90 for nominal and ordinal fields; 0 otherwise.\nminExtent :   (Number) The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.  Default value: 30 for y-axis; undefined for x-axis.\ndomainWidth :   (Number) Stroke width of axis domain line  Default value:  (none, using Vega default).\ntitleFontSize :   (Number) Font size of the title.\ntitleFontWeight :   (one of normal,bold or Number)\nlabelOverlap :   (Bool, one of parity or one of greedy) The strategy to use for resolving overlap of axis labels. If false (the default), no overlap reduction is attempted. If set to true or \"parity\", a strategy of removing every other label is used (this works well for standard linear axes). If set to \"greedy\", a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).  Default value: true for non-nominal fields with non-log scales; \"greedy\" for log scales; otherwise false.\ntitleFont :   (String/Symbol) Font of the title. (e.g., \"Helvetica Neue\").\ntickColor :   (String/Symbol) The color of the axis\'s tick.\ngridOpacity :   (Number) The stroke opacity of grid (value between [0,1])  Default value: (1 by default)\ngridWidth :   (Number) The grid width, in pixels.\ntitleAngle :   (Number) Angle in degrees of axis titles.\ntitleMaxLength :   (Number) Max length for axis title if the title is automatically generated from the field\'s description.\ntitleLimit :   (Number) Maximum allowed pixel width of axis titles.\ntitleY :   (Number) Y-coordinate of the axis title relative to the axis group.\ngrid :   (Bool) A boolean flag indicating if grid lines should be included as part of the axis  Default value: true for continuous scales that are not binned; otherwise, false.\ngridColor :   (String/Symbol) Color of gridlines.\nbandPosition :   (Number) An interpolation fraction indicating where, for band scales, axis ticks should be positioned. A value of 0 places ticks at the left edge of their bands. A value of 0.5 places ticks in the middle of their bands.\nlabelFont :   (String/Symbol) The font of the tick label.\ntitleAlign :   (String/Symbol) Horizontal text alignment of axis titles.\ntitleBaseline :   (String/Symbol) Vertical text baseline for axis titles.\ngridDash :   (Array of Number) The offset (in pixels) into which to begin drawing with the grid dash array.\ndomain : A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.  Default value: true see help for vldomain()\nlabelFontSize :   (Number) The font size of the label, in pixels.\nlabels :   (Bool) A boolean flag indicating if labels should be included as part of the axis.  Default value:  true.\nlabelColor :   (String/Symbol) The color of the tick label, can be in hex color code or regular color name.\nlabelLimit :   (Number) Maximum allowed pixel width of axis tick labels.\nmaxExtent :   (Number) The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.  Default value: undefined.\nlabelFlush :   (Bool or Number) Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.  Default value: true for axis of a continuous x-scale. Otherwise, false.\nticks :   (Bool) Boolean value that determines whether the axis should include ticks.\ntitleColor :   (String/Symbol) Color of the title, can be in hex color code or regular color name.\ntitle :  see help for vltitle()\ntext :  see help for vltext()\ntrail :   - tension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\npoint : A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.  - If this property is \"transparent\", transparent points will be used (for enhancing tooltips and selections).  - If this property is an empty object ({}) or true, filled points with default properties will be used.  - If this property is false, no points would be automatically added to line or area marks.  Default value: false. see help for vlpoint()\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\nautosize : Sets how the visualization size should be determined. If a string, should be one of \"pad\", \"fit\" or \"none\". Object values can additionally specify parameters for content sizing and automatic resizing. \"fit\" is only supported for single and layered views that don\'t use rangeStep.  Default value: pad see help for vlautosize()\nlegend :  see help for vllegend()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.layer",
    "page": "API reference",
    "title": "VegaLite.layer",
    "category": "function",
    "text": "vllayer in vllayer(), plot() and vlspec()\n\nOne of :\n\ncase #1\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #2 Layer Spec with encoding and projection\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.facet",
    "page": "API reference",
    "title": "VegaLite.facet",
    "category": "function",
    "text": "vlfacet in plot() and vlspec()\n\ncolumn :  see help for vlcolumn()\nrow :  see help for vlrow()\n\n\n\n\n\n"
},

{
    "location": "functions.html#Base.repeat",
    "page": "API reference",
    "title": "Base.repeat",
    "category": "function",
    "text": "vlrepeat in plot() and vlspec()\n\ncolumn : Horizontal repeated views. see help for vlcolumn()\nrow : Vertical repeated views. see help for vlrow()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.hconcat",
    "page": "API reference",
    "title": "VegaLite.hconcat",
    "category": "function",
    "text": "vlhconcat in plot()\n\nOne of :\n\ncase #1\nname :   (String/Symbol) Name of the visualization for later reference.\nhconcat : A list of views that should be concatenated and put into a row. see help for vlhconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #2\nname :   (String/Symbol) Name of the visualization for later reference.\nvconcat : A list of views that should be concatenated and put into a column. see help for vlvconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #3\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #4\nname :   (String/Symbol) Name of the visualization for later reference.\nspec : A specification of the view that gets faceted. see help for vlspec()\ndata :  see help for vldata()\nfacet :  see help for vlfacet()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #5 Layer Spec with encoding and projection\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #6\nname :   (String/Symbol) Name of the visualization for later reference.\nspec :  see help for vlspec()\ndata :  see help for vldata()\nrepeat :  see help for vlrepeat()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vconcat",
    "page": "API reference",
    "title": "VegaLite.vconcat",
    "category": "function",
    "text": "vlvconcat in plot()\n\nOne of :\n\ncase #1\nname :   (String/Symbol) Name of the visualization for later reference.\nhconcat : A list of views that should be concatenated and put into a row. see help for vlhconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #2\nname :   (String/Symbol) Name of the visualization for later reference.\nvconcat : A list of views that should be concatenated and put into a column. see help for vlvconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #3\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #4\nname :   (String/Symbol) Name of the visualization for later reference.\nspec : A specification of the view that gets faceted. see help for vlspec()\ndata :  see help for vldata()\nfacet :  see help for vlfacet()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #5 Layer Spec with encoding and projection\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #6\nname :   (String/Symbol) Name of the visualization for later reference.\nspec :  see help for vlspec()\ndata :  see help for vldata()\nrepeat :  see help for vlrepeat()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.spec",
    "page": "API reference",
    "title": "VegaLite.spec",
    "category": "function",
    "text": "vlspec in vlspec()\n\nOne of :\n\ncase #1\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #2 Layer Spec with encoding and projection\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\n\nvlspec in plot()\n\nOne of :\n\ncase #1\nname :   (String/Symbol) Name of the visualization for later reference.\nhconcat : A list of views that should be concatenated and put into a row. see help for vlhconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #2\nname :   (String/Symbol) Name of the visualization for later reference.\nvconcat : A list of views that should be concatenated and put into a column. see help for vlvconcat()\ndata :  see help for vldata()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #3\ndata :  see help for vldata()\nmark :  see help for vlmark()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nselection : A key-value mapping between selection names and definitions. see help for vlselection()\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #4\nname :   (String/Symbol) Name of the visualization for later reference.\nspec : A specification of the view that gets faceted. see help for vlspec()\ndata :  see help for vldata()\nfacet :  see help for vlfacet()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #5 Layer Spec with encoding and projection\ndata :  see help for vldata()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\nname :   (String/Symbol) Name of the visualization for later reference.\nheight :   (Number) The height of a visualization.  Default value: - If a view\'s autosize type is \"fit\" or its y-channel has a continuous scale, the height will be the value of config.view.height. - For y-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the height is determined by the range step, paddings, and the cardinality of the field mapped to y-channel. Otherwise, if the rangeStep is null, the height will be the value of config.view.height. - If no field is mapped to y channel, the height will be the value of rangeStep.  Note: For plots with row and column channels, this represents the height of a single view.  See also: The documentation for width and height contains more examples.\nlayer : Layer or single view specifications to be layered.  Note: Specifications inside layer cannot use row and column channels as layering facet specifications is not allowed. see help for vllayer()\nencoding :  see help for vlencoding()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\nwidth :   (Number) The width of a visualization.  Default value: This will be determined by the following rules:  - If a view\'s autosize type is \"fit\" or its x-channel has a continuous scale, the width will be the value of config.view.width. - For x-axis with a band or point scale: if rangeStep is a numeric value or unspecified, the width is determined by the range step, paddings, and the cardinality of the field mapped to x-channel.   Otherwise, if the rangeStep is null, the width will be the value of config.view.width. - If no field is mapped to x channel, the width will be the value of config.scale.textXRangeStep for text mark and the value of rangeStep for other marks.  Note: For plots with row and column channels, this represents the width of a single view.  See also: The documentation for width and height contains more examples.\nprojection :  see help for vlprojection()\ntitle : Title for the plot. see help for vltitle()\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\ncase #6\nname :   (String/Symbol) Name of the visualization for later reference.\nspec :  see help for vlspec()\ndata :  see help for vldata()\nrepeat :  see help for vlrepeat()\ntitle : Title for the plot. see help for vltitle()\nresolve : Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from scale, axis, and legend to a mapping from channels to resolutions. see help for vlresolve()\ndescription :   (String/Symbol) Description of this mark for commenting purpose.\ntransform : An array of data transformations such as filter and new field calculation. see help for vltransform()\n\n\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.selection",
    "page": "API reference",
    "title": "VegaLite.selection",
    "category": "function",
    "text": "vlselection in vllayer() and vlspec()\n\nA key-value mapping between selection names and definitions.\n\nvlselection in plot()\n\nA key-value mapping between selection names and definitions.\n\nvlselection in vl*()\n\nOne of :\n\ncase #1\nnot :   (Void)\ncase #2\nand :   (Array of Void)\ncase #3\nor :   (Array of Void)\n\nvlselection in vlconfig()\n\ninterval :  see help for vlinterval()\nmulti :  see help for vlmulti()\nsingle :  see help for vlsingle()\n\n\n\n\n\n"
},

{
    "location": "functions.html#st-level-functions-1",
    "page": "API reference",
    "title": "1st level functions",
    "category": "section",
    "text": "plot\ndata\ntransform\nvlmark\nencoding\nconfig\nlayer\nfacet\nrepeat\nhconcat\nvconcat\nspec\nselection"
},

{
    "location": "functions.html#VegaLite.vltick",
    "page": "API reference",
    "title": "VegaLite.vltick",
    "category": "function",
    "text": "vltick in vlconfig()\n\ntension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\nthickness :   (Number) Thickness of the tick mark.  Default value:  1\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nbandSize :   (Number) The width of the ticks.  Default value:  2/3 of rangeStep.\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlbar",
    "page": "API reference",
    "title": "VegaLite.vlbar",
    "category": "function",
    "text": "vlbar in vlconfig()\n\ntension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\ncontinuousBandSize :   (Number) The default size of the bars on continuous scales.  Default value: 5\nfontWeight :   (one of normal,bold or Number)\nbinSpacing :   (Number) Offset between bars for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).  Default value: 1\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\norient :   (one of horizontal,vertical)\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ndiscreteBandSize :   (Number) The size of the bars.  If unspecified, the default size is  bandSize-1, which provides 1 pixel offset between bars.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\n\n\n"
},

{
    "location": "functions.html#Mark-functions-1",
    "page": "API reference",
    "title": "Mark functions",
    "category": "section",
    "text": "vltick\nvlbar"
},

{
    "location": "functions.html#VegaLite.vlx",
    "page": "API reference",
    "title": "VegaLite.vlx",
    "category": "function",
    "text": "vlx in vlencoding()\n\nOne of :\n\ncase #1\naxis : An object defining properties of axis\'s gridlines, ticks and labels. If null, the axis for the encoding channel will be removed.  Default value: If undefined, default axis properties are applied. see help for vlaxis()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nstack :   (one of zero,normalize,center or Void) Type of stacking offset if the field should be stacked. stack is only applicable for x and y channels with continuous domains. For example, stack of y can be used to customize stacking for a vertical bar chart.  stack can be one of the following values: - \"zero\": stacking with baseline offset at zero value of the scale (for creating typical stacked bar and area chart). - \"normalize\" - stacking with normalized domain (for creating normalized stacked bar and area charts. <br/> -\"center\" - stacking with center baseline (for streamgraph). - null - No-stacking. This will produce layered bar and area chart.  Default value: zero for plots with all of the following conditions are true: (1) the mark is bar or area; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, null by default.\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntimeUnit :   (??? or ???)\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #2 Definition object for a constant value of an encoding channel.\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., \"red\" / \"#0099ff\" for color, values between 0 to 1 for opacity).\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vly",
    "page": "API reference",
    "title": "VegaLite.vly",
    "category": "function",
    "text": "vly in vlencoding()\n\nOne of :\n\ncase #1\naxis : An object defining properties of axis\'s gridlines, ticks and labels. If null, the axis for the encoding channel will be removed.  Default value: If undefined, default axis properties are applied. see help for vlaxis()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nstack :   (one of zero,normalize,center or Void) Type of stacking offset if the field should be stacked. stack is only applicable for x and y channels with continuous domains. For example, stack of y can be used to customize stacking for a vertical bar chart.  stack can be one of the following values: - \"zero\": stacking with baseline offset at zero value of the scale (for creating typical stacked bar and area chart). - \"normalize\" - stacking with normalized domain (for creating normalized stacked bar and area charts. <br/> -\"center\" - stacking with center baseline (for streamgraph). - null - No-stacking. This will produce layered bar and area chart.  Default value: zero for plots with all of the following conditions are true: (1) the mark is bar or area; (2) the stacked measure channel (x or y) has a linear scale; (3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, null by default.\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntimeUnit :   (??? or ???)\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #2 Definition object for a constant value of an encoding channel.\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., \"red\" / \"#0099ff\" for color, values between 0 to 1 for opacity).\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlx2",
    "page": "API reference",
    "title": "VegaLite.vlx2",
    "category": "function",
    "text": "vlx2 in vlencoding()\n\nOne of :\n\ncase #1 Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #2 Definition object for a constant value of an encoding channel.\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., \"red\" / \"#0099ff\" for color, values between 0 to 1 for opacity).\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vly2",
    "page": "API reference",
    "title": "VegaLite.vly2",
    "category": "function",
    "text": "vly2 in vlencoding()\n\nOne of :\n\ncase #1 Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #2 Definition object for a constant value of an encoding channel.\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., \"red\" / \"#0099ff\" for color, values between 0 to 1 for opacity).\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlcolor",
    "page": "API reference",
    "title": "VegaLite.vlcolor",
    "category": "function",
    "text": "vlcolor in vlencoding()\n\nOne of :\n\ncase #1 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #2 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nlegend : An object defining properties of the legend. If null, the legend for the encoding channel will be removed.  Default value: If undefined, default legend properties are applied. see help for vllegend()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlsize",
    "page": "API reference",
    "title": "VegaLite.vlsize",
    "category": "function",
    "text": "vlsize in vlencoding()\n\nOne of :\n\ncase #1 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #2 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nlegend : An object defining properties of the legend. If null, the legend for the encoding channel will be removed.  Default value: If undefined, default legend properties are applied. see help for vllegend()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlrow",
    "page": "API reference",
    "title": "VegaLite.vlrow",
    "category": "function",
    "text": "vlrow in vlencoding()\n\nheader : Headers of row / column channels for faceted plots. see help for vlheader()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort :  see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlcolumn",
    "page": "API reference",
    "title": "VegaLite.vlcolumn",
    "category": "function",
    "text": "vlcolumn in vlfacet()\n\nheader : Headers of row / column channels for faceted plots. see help for vlheader()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort :  see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vltooltip",
    "page": "API reference",
    "title": "VegaLite.vltooltip",
    "category": "function",
    "text": "vltooltip in vlencoding()\n\nOne of :\n\ncase #1 (Array of ???)\ncase #2 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #3 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nformat : The formatting pattern for a text field. If not defined, this will be determined automatically. see help for vlformat()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #4 (Array of ???)\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlorder",
    "page": "API reference",
    "title": "VegaLite.vlorder",
    "category": "function",
    "text": "vlorder in vlencoding()\n\nOne of :\n\ncase #1 (Array of ???)\ncase #2 (Array of ???)\ncase #3\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort :  see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #4 Definition object for a constant value of an encoding channel.\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain (e.g., \"red\" / \"#0099ff\" for color, values between 0 to 1 for opacity).\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vldetail",
    "page": "API reference",
    "title": "VegaLite.vldetail",
    "category": "function",
    "text": "vldetail in vlencoding()\n\nOne of :\n\ncase #1 (Array of ???)\ncase #2 Definition object for a data field, its type and transformation of an encoding channel.\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\ncase #3 (Array of ???)\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlshape",
    "page": "API reference",
    "title": "VegaLite.vlshape",
    "category": "function",
    "text": "vlshape in vlencoding()\n\nOne of :\n\ncase #1 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #2 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nlegend : An object defining properties of the legend. If null, the legend for the encoding channel will be removed.  Default value: If undefined, default legend properties are applied. see help for vllegend()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vlopacity",
    "page": "API reference",
    "title": "VegaLite.vlopacity",
    "category": "function",
    "text": "vlopacity in vlencoding()\n\nOne of :\n\ncase #1 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #2 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nlegend : An object defining properties of the legend. If null, the legend for the encoding channel will be removed.  Default value: If undefined, default legend properties are applied. see help for vllegend()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nsort : Sort order for the encoded field. Supported sort values include \"ascending\", \"descending\", null (no sorting), or an array specifying the preferred order of values. For fields with discrete domains, sort can also be a sort field definition object. For sort as an array specifying the preferred order of values, the sort order will obey the values in the array, followed by any unspecified values in their original order.  Default value: \"ascending\" see help for vlsort()\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\naggregate :  see help for vlaggregate()\nscale : An object defining properties of the channel\'s scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.  If null, the scale will be disabled and the data value will be directly encoded.  Default value: If undefined, default scale properties are applied. see help for vlscale()\n\n\n\n"
},

{
    "location": "functions.html#VegaLite.vltext",
    "page": "API reference",
    "title": "VegaLite.vltext",
    "category": "function",
    "text": "vltext in vlconfig()\n\ntension :   (Number) Depending on the interpolation type, sets the tension parameter (for line and area marks).\nstroke : Default Stroke Color.  This has higher precedence than config.color  Default value: (None) see help for vlstroke()\nshortTimeLabels :   (Bool) Whether month names and weekday names should be abbreviated.\ndy :   (Number) The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nstrokeCap :   (one of square,butt,round) The stroke cap for line ending style. One of \"butt\", \"round\", or \"square\".  Default value: \"square\"\nfontSize :   (Number) The font size, in pixels.\nstrokeOpacity :   (Number) The stroke opacity (value between [0,1]).  Default value: 1\nangle :   (Number) The rotation angle of the text, in degrees.\norient :   (one of horizontal,vertical)\nopacity : The overall opacity (value between [0,1]).  Default value: 0.7 for non-aggregate plots with point, tick, circle, or square marks or layered bar charts and 1 otherwise. see help for vlopacity()\nfontWeight :   (one of normal,bold or Number)\nstrokeDashOffset :   (Number) The offset (in pixels) into which to begin drawing with the stroke dash array.\nfilled :   (Bool) Whether the mark\'s color should be used as fill color instead of stroke color.  Default value: true for all marks except point and false for point.  Applicable for: bar, point, circle, square, and area marks.  Note: This property cannot be used in a style config.\nshape : The default symbol shape to use. One of: \"circle\" (default), \"square\", \"cross\", \"diamond\", \"triangle-up\", or \"triangle-down\", or a custom SVG path.  Default value: \"circle\" see help for vlshape()\ntheta :   (Number) Polar coordinate angle, in radians, of the text label from the origin determined by the x and y properties. Values for theta follow the same convention of arc mark startAngle and endAngle properties: angles are measured in radians, with 0 indicating \"north\".\nfontStyle :   (one of normal,italic)\nfont :   (String/Symbol) The typeface to set the text in (e.g., \"Helvetica Neue\").\nhref : A URL to load upon mouse click. If defined, the mark acts as a hyperlink. see help for vlhref()\nfillOpacity :   (Number) The fill opacity (value between [0,1]).  Default value: 1\ndx :   (Number) The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.\nfill : Default Fill Color.  This has higher precedence than config.color  Default value: (None) see help for vlfill()\nradius :   (Number) Polar coordinate radial offset, in pixels, of the text label from the origin determined by the x and y properties.\nalign :   (one of left,right,center)\nstrokeWidth :   (Number) The stroke width, in pixels.\nsize : The pixel area each the point/circle/square. For example: in the case of circles, the radius is determined in part by the square root of the size value.  Default value: 30 see help for vlsize()\ncursor :   (one of auto,pointer,crosshair,s-resize,col-resize,copy,sw-resize,nw-resize,grab,not-allowed,ew-resize,progress,no-drop,zoom-in,se-resize,context-menu,move,grabbing,default,ne-resize,help,row-resize,nesw-resize,all-scroll,nwse-resize,vertical-text,alias,zoom-out,none,w-resize,e-resize,ns-resize,wait,text,cell,n-resize) The mouse cursor used over the mark. Any valid CSS cursor type can be used.\nstrokeDash :   (Array of Number) An array of alternating stroke, space lengths for creating dashed or dotted lines.\ninterpolate :  see help for vlinterpolate()\ncolor : Default color.  Note that fill and stroke have higher precedence than color and will override color.  Default value: <span style=\"color: #4682b4;\">&#9632;</span> \"#4682b4\"  Note: This property cannot be used in a style config. see help for vlcolor()\ntext : Placeholder text if the text channel is not specified see help for vltext()\nbaseline :   (one of bottom,top,middle)\nlimit :   (Number) The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.\n\nvltext in vlencoding()\n\nOne of :\n\ncase #1 A ValueDef with Condition<ValueDef | FieldDef> {    condition: {field: ...} | {value: ...},    value: ..., }\ncondition : A field definition or one or more value definition(s) with a selection predicate. see help for vlcondition()\nvalue :   (Number, String/Symbol or Bool) A constant value in visual domain.\ncase #2 A FieldDef with Condition<ValueDef> {    condition: {value: ...},    field: ...,    ... }\nformat : The formatting pattern for a text field. If not defined, this will be determined automatically. see help for vlformat()\nbin : A flag for binning a quantitative field, or an object defining binning parameters. If true, default binning parameters will be applied.  Default value: false see help for vlbin()\ntimeUnit :   (??? or ???)\nfield : Required. A string defining the name of the field from which to pull a data value or an object defining iterated values from the repeat operator.  Note: Dots (.) and brackets ([ and ]) can be used to access nested objects (e.g., \"field\": \"foo.bar\" and \"field\": \"foo[\'bar\']\"). If field names contain dots or brackets but are not nested, you can use \\\\ to escape dots and brackets (e.g., \"a\\\\.b\" and \"a\\\\[0\\\\]\"). See more details about escaping in the field documentation.  Note: field is not required if aggregate is count. see help for vlfield()\ncondition : One or more value definition(s) with a selection predicate.  Note: A field definition\'s condition property can only contain value definitions since Vega-Lite only allows at most one encoded field per encoding channel. see help for vlcondition()\ntitle : A title for the field. If null, the title will be removed.  Default value:  derived from the field\'s name and transformation function (aggregate, bin and timeUnit).  If the field has an aggregate function, the function is displayed as part of the title (e.g., \"Sum of Profit\"). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., \"Profit (binned)\", \"Transaction Date (year-month)\").  Otherwise, the title is simply the field name.  Notes:  1) You can customize the default field title format by providing the [fieldTitle property in the config or fieldTitle function via the compile function\'s options.  2) If both field definition\'s title and axis, header, or legend title are defined, axis/header/legend title will be used. see help for vltitle()\naggregate :  see help for vlaggregate()\ntyp :   (one of ordinal,nominal,quantitative,temporal or one of geojson,latitude,longitude) Constants and utilities for data type    Data type based on level of measurement\n\n\n\n"
},

{
    "location": "functions.html#Encoding-channels-1",
    "page": "API reference",
    "title": "Encoding channels",
    "category": "section",
    "text": "vlx\nvly\nvlx2\nvly2\nvlcolor\nvlsize\nvlrow\nvlcolumn\nvltooltip\nvlorder\nvldetail\nvlshape\nvlopacity\nvltext"
},

{
    "location": "functions.html#nd-level-functions-1",
    "page": "API reference",
    "title": "2nd level functions",
    "category": "section",
    "text": "vlaxis\nvlscale\nvlsort\nvlformat\nvllegend\nvltitle\nvlvalues\nvlfrom\nvloneOf\nvloverlay\nvlcondition\nvlencode\nvlequal\nvlaxisBand\nvlfilter\nvlscheme\nvlfield\nvlpadding\nvlheader\nvlinterval\nvlbin\nvlbind\nvlsummarize\nvldomain\nvlresolve\nvlcell"
},

]}
